#!/usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2014, Matthew Klein
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
# * Neither the names of the authors nor the names of their
# affiliated organizations may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from std_msgs.msg import UInt8
from geometry_msgs.msg import Twist

import serial,struct

class crio_driver(object):
  def __init__(self):
    # ROS init node
    rospy.init_node('crio_driver')
    # Listen for a /std_msgs/UInt8 on the topic /plow/angle
    rospy.Subscriber('/plot/angle', UInt8, self.plowAngleSubCB)
    # Listen for a /geometry_msgs/Twist on the topic /cmd_vel
    rospy.Subscriber('/cmd_vel', Twist, self.vwSubCB)

    # Set some parameters for the serial port (port and baudrate)
    crioPort = rospy.get_param('~port','/dev/ttyUSB2')
    crioBaudrate = rospy.get_param('~baud',57600)
    # and initialize the serial port (we shoudl add close() somwher in here)
    self.crioSerial = serial.Serial(port=crioPort,baudrate=crioBaudrate,timeout=0.01)

    # Initialize parameters
    self.velocity = 0
    self.omega = 0
    self.plowAngle = 0

  def vwSubCB(self, msg):
    # Convert m/s to mm/s
    self.velocity = msg.linear.x*1000.0
    self.omega = msg.angular.z*1000.0
    if self.velocity > 2000:
      self.velocity = 2000
    if self.velcoity < -2000
      self.velocity = -2000
    # Now we must calculate the checksum
    checksum = (sum(bytearray(struct.pack('>BBBBhhB',170,160,5,1,int(round(self.velocity)),int(round(self.omega)),self.plowAngle))) % 256) & 127
    # Now constuct the entire serialized packet
    serialMsg = struct.pack('>BBBBhhBBB',170,160,5,1,int(round(self.velocity)),int(round(self.omega)),checksum,13)
    # and send the message!
    self.crioSerial.write(serialMsg)

